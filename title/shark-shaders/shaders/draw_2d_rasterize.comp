#version 460

#extension GL_GOOGLE_include_directive : require

#extension GL_EXT_buffer_reference : require
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_scalar_block_layout : require
#extension GL_EXT_control_flow_attributes : require

#extension GL_KHR_shader_subgroup_vote : require
#extension GL_KHR_shader_subgroup_ballot : require

#include "bindings_compute.h"
#include "draw_2d.h"
#include "sdf.h"

struct RasterizeConstants {
    uint tile_stride;
    uint _pad;

    CommandRef draw_buffer;
    ScissorRef scissor_buffer;
    GlyphRef glyph_buffer;
    CoarseRef coarse_buffer;
    FineRef fine_buffer;
    TileRef tile_buffer;
};

layout(std430, push_constant) uniform RasterizeConstantsBlock {
    RasterizeConstants constants;
};

/// x = (((index >> 2) & 0x0007) & 0xFFFE) | index & 0x0001
/// y = ((index >> 1) & 0x0003) | (((index >> 3) & 0x0007) & 0xFFFC)

#define DEBUG_SHOW_TILES 0

vec3 plasma_quintic(in float x)
{
	x = clamp(x, 0.0, 1.0);
	vec4 x1 = vec4(1.0, x, x * x, x * x * x); // 1 x x2 x3
	vec4 x2 = x1 * x1.w * x; // x4 x5 x6 x7
	return vec3(
		dot(x1.xyzw, vec4(+0.063861086, +1.992659096, -1.023901152, -0.490832805)) + dot(x2.xy, vec2(+1.308442123, -0.914547012)),
		dot(x1.xyzw, vec4(+0.049718590, -0.791144343, +2.892305078, +0.811726816)) + dot(x2.xy, vec2(-4.686502417, +2.717794514)),
		dot(x1.xyzw, vec4(+0.513275779, +1.580255060, -5.164414457, +4.559573646)) + dot(x2.xy, vec2(-1.916810682, +0.570638854))
    );
}

layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

void main() {
    const uvec2 tile_coord = gl_WorkGroupID.xy / (TILE_SIZE / gl_WorkGroupSize.xy);
    const uint tile_index = tile_coord.y * constants.tile_stride + tile_coord.x;

    const uint lo = constants.tile_buffer.values[tile_index].index_min;
    const uint hi = constants.tile_buffer.values[tile_index].index_max;

    if (lo == hi) {
        return;
    }

#if DEBUG_SHOW_TILES == 1

    uint count = hi - lo;
    const vec3 color = plasma_quintic(float(count) / 50.0);
    imageStore(ui_layer_write, ivec2(gl_GlobalInvocationID.xy), vec4(color, 1.0));

#elif DEBUG_SHOW_TILES == 2

    uint count = 0;
    for (uint i = lo; i < hi; i++) {
        count += bitCount(constants.fine_buffer.values[i]);
    }
    const vec3 color = plasma_quintic(float(count) / 600.0);
    imageStore(ui_layer_write, ivec2(gl_GlobalInvocationID.xy), vec4(color, 1.0));

#else

    const vec2 sample_center = gl_GlobalInvocationID.xy + vec2(0.5);

    vec4 accum = vec4(0.0);

    for (uint i = lo; i < hi; i++) {
        uint bitmap = constants.fine_buffer.values[i];
        while (bitmap != 0) {
            const uint index = findLSB(bitmap);
            bitmap ^= bitmap & -bitmap;

            const uint base_index = (constants.coarse_buffer.values[i] & 0xffff) * 32;
            const uint packed_type = constants.draw_buffer.values[base_index + index].packed_type;
            const uint cmd_type = packed_type >> 24;
            const uint cmd_scissor = packed_type & 0xffff;

            const Scissor scissor = constants.scissor_buffer.values[cmd_scissor];

            vec4 primitive_color = vec4(0.0);
            switch (cmd_type) {
                case DRAW_2D_CMD_RECT:
                {
                    const CmdRect cmd_rect = decode_rect(constants.draw_buffer.values[base_index + index]);

                    const vec2 cmd_min = cmd_rect.position;
                    const vec2 cmd_max = cmd_rect.position + cmd_rect.bound;

                    const float border_width = float((packed_type >> 16) & 0xff);
                    const vec4 border_radii = unpackUnorm4x8(cmd_rect.border_radii) * 255.0;
                    const float max_border_radius = max(border_radii.x, max(border_radii.y, max(border_radii.z, border_radii.w)));
                    const float shrink = (2.0 - sqrt(2.0)) * max_border_radius;

                    const vec2 cmd_min_clipped = max(scissor.offset_min, cmd_min + border_width + shrink);
                    const vec2 cmd_max_clipped = min(scissor.offset_max, cmd_max - border_width - shrink);

                    if (all(greaterThan(sample_center, cmd_min_clipped)) && all(lessThan(sample_center, cmd_max_clipped))) {
                        primitive_color = unpackUnorm4x8(cmd_rect.background_color).bgra;
                    } else {
                        const vec2 b = cmd_rect.bound / 2.0;
                        const vec2 p = cmd_rect.position + b - sample_center;

                        float d;
                        if (all(equal(border_radii, vec4(0.0)))) {
                            d = sdf_box(p, b);
                        } else {
                            d = sdf_rounded_box(p, b, border_radii);
                        }

                        const vec4 background_color = unpackUnorm4x8(cmd_rect.background_color).bgra;
                        const vec4 border_color = unpackUnorm4x8(cmd_rect.border_color).bgra;
                        primitive_color = mix(background_color, border_color, smoothstep(1.0, 0.0, 1.0 - d - border_width));
                        primitive_color = mix(primitive_color, vec4(0), smoothstep(1.0, 0.0, 1.0 - d));

                        const vec2 clip_b = (scissor.offset_max - scissor.offset_min) / 2.0;
                        const vec2 clip_p = scissor.offset_min + clip_b - sample_center;
                        d = max(d, sdf_box(clip_p, clip_b));
                        primitive_color = d < 0.0 ? primitive_color : vec4(0);
                    }
                    break;
                }
                case DRAW_2D_CMD_GLYPH:
                {
                    const CmdGlyph cmd_glyph = decode_glyph(constants.draw_buffer.values[base_index + index]);
                    const Glyph glyph = constants.glyph_buffer.values[cmd_glyph.index];
                    const vec2 cmd_min = cmd_glyph.position + glyph.offset_min;
                    const vec2 cmd_max = cmd_glyph.position + glyph.offset_max;
                    if (all(greaterThanEqual(sample_center, max(scissor.offset_min, cmd_min))) && all(lessThanEqual(sample_center, min(scissor.offset_max, cmd_max)))) {
                        const vec2 glyph_size = glyph.offset_max - glyph.offset_min;
                        const vec2 uv = mix(glyph.atlas_min, glyph.atlas_max, (sample_center - cmd_min) / glyph_size);
                        const vec4 color = unpackUnorm4x8(cmd_glyph.color).bgra;
                        const float coverage = textureLod(sampler2D(glyph_atlas, samplers[SAMPLER_BILINEAR_UNNORMALIZED]), uv, 0.0).r * color.a;
                        primitive_color = color * coverage;
                    }
                    break;
                }
            }

            // does it blend?
            accum.rgba = primitive_color.rgba + accum.rgba * (1.0 - primitive_color.a);
        }
    }

    imageStore(ui_layer_write, ivec2(gl_GlobalInvocationID.xy), accum);

#endif

}
