#version 460

#extension GL_GOOGLE_include_directive : require

#extension GL_EXT_buffer_reference : require
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_scalar_block_layout : require
#extension GL_EXT_control_flow_attributes : require

#extension GL_KHR_shader_subgroup_arithmetic : require
#extension GL_KHR_shader_subgroup_ballot : require
#extension GL_KHR_shader_subgroup_vote : require

#include "draw_2d.h"

struct ScatterConstants {
    uvec2 tile_resolution;

    uint draw_buffer_len;
    uint coarse_buffer_len;

    CommandRef draw_buffer;
    ScissorRef scissor_buffer;
    GlyphRef glyph_buffer;
    CoarseRef coarse_buffer;
};

layout(std430, push_constant) uniform ScatterConstantsBlock {
    ScatterConstants constants;
};

const uint MAX_TILES = 256;
const uint BITMAP_STRIDE = MAX_TILES / 32;
const uint BITMAP_SIZE = MAX_TILES * BITMAP_STRIDE;

shared uint intersected_tiles[BITMAP_SIZE];

layout (local_size_x_id = 0, local_size_y = 1, local_size_z = 1) in;

void main() {
    const uint local_id = gl_SubgroupID * gl_SubgroupSize + gl_SubgroupInvocationID;
    const uint draw_index = gl_WorkGroupID.x * gl_WorkGroupSize.x + local_id;

    const bool in_bounds = draw_index < constants.draw_buffer_len;

    uint cmd_scissor = 0;
    vec2 cmd_min = vec2(99999.9);
    vec2 cmd_max = vec2(-99999.9);
    if (in_bounds) {
        const uint packed_type = constants.draw_buffer.values[draw_index].packed_type;
        const uint cmd_type = packed_type >> 24;
        cmd_scissor = packed_type & 0xffff;

        for (;;) {
            const uint scalar_type = subgroupBroadcastFirst(cmd_type);
            [[branch]]
            if (scalar_type == cmd_type) {
                switch (scalar_type) {
                    case DRAW_2D_CMD_RECT:
                        const CmdRect cmd_rect = decode_rect(constants.draw_buffer.values[draw_index]);
                        cmd_min = cmd_rect.position;
                        cmd_max = cmd_rect.position + cmd_rect.bound;
                        break;
                    case DRAW_2D_CMD_GLYPH:
                        const CmdGlyph cmd_glyph = decode_glyph(constants.draw_buffer.values[draw_index]);
                        const Glyph glyph = constants.glyph_buffer.values[cmd_glyph.index];
                        cmd_min = cmd_glyph.position + glyph.offset_min;
                        cmd_max = cmd_glyph.position + glyph.offset_max;
                        break;
                }
                break;
            }
        }
    }

    const Scissor scissor = constants.scissor_buffer.values[cmd_scissor];

    const bool out_of_bounds = any(greaterThanEqual(cmd_min, cmd_max)) || any(greaterThan(cmd_min, scissor.offset_max)) || any(lessThan(cmd_max, scissor.offset_min));

    // Are all draws off-screen?
    if (subgroupAll(out_of_bounds)) {
        return;
    }

    cmd_min = max(cmd_min, scissor.offset_min);
    cmd_max = min(cmd_max, scissor.offset_max);

    // Make sure off-screen commands don't contribute to the bounds.
    const uvec2 cmds_tile_min = uvec2(clamp(subgroupMin(out_of_bounds ? ivec2(999999) : ivec2(floor(cmd_min / TILE_SIZE))), ivec2(0), constants.tile_resolution));
    const uvec2 cmds_tile_max = uvec2(clamp(subgroupMax(out_of_bounds ? ivec2(-999999) : ivec2(floor(cmd_max / TILE_SIZE))), ivec2(0), constants.tile_resolution));
    const uvec2 cmd_tile_min = uvec2(clamp(ivec2(floor(cmd_min / TILE_SIZE)), ivec2(0), constants.tile_resolution));
    const uvec2 cmd_tile_max = uvec2(clamp(ivec2(floor(cmd_max / TILE_SIZE)), ivec2(0), constants.tile_resolution));

    const bool cmd_dominates_bounds = all(equal(cmd_tile_min, cmds_tile_min)) && all(equal(cmd_tile_max, cmds_tile_max));
    const bool use_combined_bounds = subgroupAny(cmd_dominates_bounds);

    if (use_combined_bounds) {
        const uvec2 tile_count = cmds_tile_max - cmds_tile_min + ivec2(1);

        uint offset;
        if (subgroupElect()) {
            offset = atomicAdd(constants.coarse_buffer.values[0], tile_count.x * tile_count.y) + 1;
        }
        offset = subgroupBroadcastFirst(offset);

        for (uint i = 0; i < tile_count.y; i++) {
            for (uint j = 0; j < tile_count.x; j += gl_SubgroupSize) {
                const uint jj = j + gl_SubgroupInvocationID;
                const uint y = cmds_tile_min.y + i;
                const uint x = cmds_tile_min.x + jj;
                if (jj < tile_count.x) {
                    const uint packed = ((y & 0xff) << 24) | ((x & 0xff) << 16) | (gl_WorkGroupID.x & 0xffff);
                    const uint index = offset + i * tile_count.x + jj;
                    if (index < constants.coarse_buffer_len) {
                        constants.coarse_buffer.values[index] = packed;
                    }
                }
            }
        }
    } else {
        const uint start = cmds_tile_min.y * BITMAP_STRIDE + cmds_tile_min.x / 32;
        const uint end = cmds_tile_max.y * BITMAP_STRIDE + cmds_tile_max.x / 32;

        for (uint i = start; i <= end; i += gl_SubgroupSize) {
            const uint ii = i + gl_SubgroupInvocationID;
            if (ii < BITMAP_SIZE) {
                intersected_tiles[ii] = 0;
            }
        }

        subgroupBarrier();

        if (!out_of_bounds) {
            const uint min_word = cmd_tile_min.x / 32;
            const uint max_word = cmd_tile_max.x / 32;
            const uint min_bit = cmd_tile_min.x & 31;
            const uint max_bit = cmd_tile_max.x & 31;
            const uint lsb = ~((1 << min_bit) - 1);
            const uint msb = ((1 << max_bit) - 1) | 1 << max_bit;
            if (min_word == max_word) {
                for (uint y = cmd_tile_min.y; y <= cmd_tile_max.y; y++) {
                    atomicOr(intersected_tiles[y * BITMAP_STRIDE + min_word], lsb & msb);
                }
            } else {
                for (uint y = cmd_tile_min.y; y <= cmd_tile_max.y; y++) {
                    atomicOr(intersected_tiles[y * BITMAP_STRIDE + min_word], lsb);
                    for (uint i = min_word + 1; i <= (max_word - 1); i++) {
                        intersected_tiles[y * BITMAP_STRIDE + i] = 0xffffffff;
                    }
                    atomicOr(intersected_tiles[y * BITMAP_STRIDE + max_word], msb);
                }
            }
        }

        subgroupBarrier();

        uint count = 0;
        for (uint i = start; i <= end; i += gl_SubgroupSize) {
            const uint ii = i + gl_SubgroupInvocationID;
            count += subgroupAdd(ii < BITMAP_SIZE ? bitCount(intersected_tiles[ii]) : 0);
        }

        if (count == 0) {
            return;
        }

        uint offset;
        if (subgroupElect()) {
            offset = atomicAdd(constants.coarse_buffer.values[0], count) + 1;
        }
        offset = subgroupBroadcastFirst(offset);

        for (uint i = start; i <= end; i += gl_SubgroupSize) {
            const uint ii = i + gl_SubgroupInvocationID;
            if (ii >= BITMAP_SIZE) {
                continue;
            }

            uint bitmap = intersected_tiles[ii];
            const uint count = bitCount(bitmap);
            uint scan = subgroupExclusiveAdd(count);

            while (bitmap != 0) {
                const uint index = findLSB(bitmap);
                bitmap ^= bitmap & -bitmap;
                const uint y = (ii * 32 + index) / MAX_TILES;
                const uint x = (ii * 32 + index) & (MAX_TILES - 1);
                const uint packed = (y << 24) | (x << 16) | (gl_WorkGroupID.x & 0xffff);
                if (offset + scan < constants.coarse_buffer_len) {
                    constants.coarse_buffer.values[offset + scan] = packed;
                }
                scan++;
            }

            offset += subgroupAdd(count);
        }
    }
}
